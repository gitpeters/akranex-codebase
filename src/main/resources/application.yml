#server
server:
  servlet:
    context-path: /user
  port: 8083

#jwt
jwt:
  access:
    expiration:
      milliseconds: 900000
  refresh:
    expiration:
      milliseconds: 3000000
  secret: securesecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecucuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecure

#jdbc variables
jdbc:
  url: jdbc:mysql://akranex-dev-database.mysql.database.azure.com:3306/akraness?createDatabaseIfNotExist=true&autoReconnect=true
  user: akranex_admin@akranex-dev-database
  password: P@ssw0rd123#
  driver: com.mysql.cj.jdbc.Driver
#  url: jdbc:mysql://localhost:3306/akraness?createDatabaseIfNotExist=true&autoReconnect=true
#  user: root
#  password: Ab@230596
#  driver: com.mysql.cj.jdbc.Driver

#spring
spring:
  datasource:
    url: ${jdbc.url}
    username: ${jdbc.user}
    password: ${jdbc.password}
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    hikari:
      minimum-idle: 1
      maximum-pool-size: 5
      idle-timeout: 10000
      max-lifetime: 1000
  flyway:
    out-of-order: true

  redis:
    host: redis-master.redis-dev.svc.cluster.local
#    host: localhost
    port: 6379
    password: NY8lg9CzBP
    expiration: 15

  #Kafka
  kafka:
    consumer:
      bootstrap-servers: kafka.kafka-dev.svc.cluster.local:9092
      group-id: notification
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      bootstrap-servers: kafka.kafka-dev.svc.cluster.local:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      group-id: notification
  # Request size
  servlet:
    multipart:
      max-request-size: 800MB
topic:
  name:
    producer: notifications
    partition: 1
    replica: 1

auto:
  create:
    topics:
      enable: true

#azure storage
azure:
  storage:
    account-name: akranex
    account-key: akranex
    container-name: akranex
    endpoint: akranex
  blob:
    container-name: akranex-dev
    connection-string: DefaultEndpointsProtocol=https;AccountName=tfstate629860657;AccountKey=J4le+a6kbqN4QAHWekjKbG94VVyrmZPDMkchqmtcSCu+53Mtv1l6TmjUO3nVPb1MpEwxkuRb30XK+ASto7MmYw==;EndpointSuffix=core.windows.net
    profile-image-path: profiles /

regex:
  email: ^(?=.{1,64}@)[A-Za-z0-9_-]+(\.[A-Za-z0-9_-]+)*@[^-][A-Za-z0-9-]+(\.[A-Za-z0-9-]+)*(\.[A-Za-z]{2,})$
  password: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#&()?[{}]:;',?/*~$^+=<>]).{8,20}$
  mobile-no: (^$|\d{11,14})

#temp config - should delete
activation:
  url: http://akranex.test.com/activate-account/

#password reset
reset:
  valid:
    for: 10
#email template ids
email:
  otp:
    verification: d-ccd5124343c343a4afa05a201dd190f2
    reset-password: d-23dc36aa7f884d138dd4e1e30fb2e431
  kyc:
    approval-id: d-b2f28b5fa58d4a438743d5178d75d380

#chimoney
chimoney:
  base-url: https://api.chimoney.io/v0.2/
  api-key: 67483a429061214cd62365279b4b043df041da41a01f1ed6d518a14816d5c0a4

# mono
mono:
  base-url: https://api.withmono.com/v1/
  api-key: test_sk_kfklx01b9mkf295s87iw

#plaid
plaid:
  template-id: idvtmp_5B3B3Q3w7mUPrE
  client-id: 63cd6f6ca361a10012480d9d
  secret: 580d6f4dfa42a9c51fbb7fa5224bbb
  base-url: https://sandbox.plaid.com/
default:
  pin:
    allowed: true
    number: 007712

app:
  firebase-configuration-file: akranex-dev-firebase-adminsdk-ho749-44e042f983.json

myidentitypass:
  api-key: gvdGz52t.dXK3O2KX6eiBeMJd4x3TXeC8aO7HW5gc
  app-id: 72c6dfa4-fa10-41a1-b45f-40e485b1bc76
  base-url: https://api.myidentitypay.com/api/
  data-base-bvn-url: https://api.myidentitypay.com/api/v2/biometrics/merchant/data/verification/
